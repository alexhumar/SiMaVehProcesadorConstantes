using SiMaVeh.Domain.DataSeed.Fixtures.Builders.Interfaces;
using SiMaVeh.Domain.DataSeed.Fixtures.CategoriaMarca.Interfaces;
using SiMaVeh.Domain.DataSeed.Fixtures.Marca.Interfaces;
using SiMaVeh.Domain.DataSeed.Models;
using System.Collections.Generic;

namespace SiMaVeh.Domain.DataSeed.Fixtures.Marca.FixtureGetters
{
    /// <summary>
    /// Fixture getter de marca
    /// </summary>
    internal class MarcaFixtureGetter : IMarcaFixtureGetter
    {
        private readonly IDatosEntidadBuilder datosEntidadBuilder;
		private readonly ICategoriaMarcaFixtureGetter categoriaMarcaFixtureGetter;
        private readonly ICollection<DatosMarca> marcas;

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="datosEntidadBuilder"></param>
        /// <param name="categoriaMarcaFixtureGetter"></param>
        public MarcaFixtureGetter(IDatosEntidadBuilder datosEntidadBuilder,
            ICategoriaMarcaFixtureGetter categoriaMarcaFixtureGetter)
        {
            this.datosEntidadBuilder = datosEntidadBuilder;
			this.categoriaMarcaFixtureGetter = categoriaMarcaFixtureGetter;
            marcas = new List<DatosMarca>();

            Initialize();
        }

        /// <summary>
        /// Get
        /// </summary>
        /// <returns></returns>
        public ICollection<DatosMarca> Get()
        {
            return marcas;
        }

        private void Initialize()
        {
            var categoriaAutomovil = categoriaMarcaFixtureGetter.FindByNombre(Constants.CategoriasMarca.CategoriaMarca.Automovil);
            var categoriaFluido = categoriaMarcaFixtureGetter.FindByNombre(Constants.CategoriasMarca.CategoriaMarca.Fluido);
            var categoriaFuenteEnergia = categoriaMarcaFixtureGetter.FindByNombre(Constants.CategoriasMarca.CategoriaMarca.FuenteEnergia);
            var categoriaLubricante = categoriaMarcaFixtureGetter.FindByNombre(Constants.CategoriasMarca.CategoriaMarca.Lubricante);
            var categoriaNeumatico = categoriaMarcaFixtureGetter.FindByNombre(Constants.CategoriasMarca.CategoriaMarca.Neumatico);
            var categoriaRepuesto = categoriaMarcaFixtureGetter.FindByNombre(Constants.CategoriasMarca.CategoriaMarca.Repuesto);

            marcas.Add(datosEntidadBuilder.Build(1, Constants.Marcas.Marca.AISIN, new List<DatosEntidad> { categoriaLubricante, categoriaRepuesto, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(2, Constants.Marcas.Marca.AMSOIL, new List<DatosEntidad> { categoriaLubricante }));
            marcas.Add(datosEntidadBuilder.Build(3, Constants.Marcas.Marca.Castrol, new List<DatosEntidad> { categoriaLubricante, categoriaRepuesto, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(4, Constants.Marcas.Marca.CEPSA, new List<DatosEntidad> { categoriaLubricante }));
            marcas.Add(datosEntidadBuilder.Build(5, Constants.Marcas.Marca.CHAMPION, new List<DatosEntidad> { categoriaLubricante, categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(6, Constants.Marcas.Marca.CHAMPOIL, new List<DatosEntidad> { categoriaLubricante }));
            marcas.Add(datosEntidadBuilder.Build(7, Constants.Marcas.Marca.COMMA, new List<DatosEntidad> { categoriaLubricante, categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(8, Constants.Marcas.Marca.Contact, new List<DatosEntidad> { categoriaLubricante }));
            marcas.Add(datosEntidadBuilder.Build(9, Constants.Marcas.Marca.DYNAMAX, new List<DatosEntidad> { categoriaLubricante, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(10, Constants.Marcas.Marca.Elf, new List<DatosEntidad> { categoriaLubricante, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(11, Constants.Marcas.Marca.Febj, new List<DatosEntidad> { categoriaLubricante, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(12, Constants.Marcas.Marca.FeuVert, new List<DatosEntidad> { categoriaLubricante }));
            marcas.Add(datosEntidadBuilder.Build(13, Constants.Marcas.Marca.Ford, new List<DatosEntidad> { categoriaLubricante, categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(14, Constants.Marcas.Marca.K2, new List<DatosEntidad> { categoriaLubricante, categoriaRepuesto, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(15, Constants.Marcas.Marca.LIQUIMOLY, new List<DatosEntidad> { categoriaLubricante, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(16, Constants.Marcas.Marca.MEYLE, new List<DatosEntidad> { categoriaLubricante, categoriaRepuesto, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(17, Constants.Marcas.Marca.Mobil, new List<DatosEntidad> { categoriaLubricante }));
            marcas.Add(datosEntidadBuilder.Build(18, Constants.Marcas.Marca.MOTUL, new List<DatosEntidad> { categoriaLubricante, categoriaRepuesto, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(19, Constants.Marcas.Marca.ORLEN, new List<DatosEntidad> { categoriaLubricante }));
            marcas.Add(datosEntidadBuilder.Build(20, Constants.Marcas.Marca.Pennzoil, new List<DatosEntidad> { categoriaLubricante }));
            marcas.Add(datosEntidadBuilder.Build(21, Constants.Marcas.Marca.RAVENOL, new List<DatosEntidad> { categoriaLubricante, categoriaRepuesto, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(22, Constants.Marcas.Marca.REPSOL, new List<DatosEntidad> { categoriaLubricante }));
            marcas.Add(datosEntidadBuilder.Build(23, Constants.Marcas.Marca.Shell, new List<DatosEntidad> { categoriaLubricante, categoriaFluido, categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(24, Constants.Marcas.Marca.SWAG, new List<DatosEntidad> { categoriaLubricante, categoriaRepuesto, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(25, Constants.Marcas.Marca.TOTAL, new List<DatosEntidad> { categoriaLubricante, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(26, Constants.Marcas.Marca.VAG, new List<DatosEntidad> { categoriaLubricante, categoriaRepuesto, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(27, Constants.Marcas.Marca.VAICO, new List<DatosEntidad> { categoriaLubricante, categoriaRepuesto, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(28, Constants.Marcas.Marca.Valvoline, new List<DatosEntidad> { categoriaLubricante, categoriaRepuesto, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(29, Constants.Marcas.Marca.VATOIL, new List<DatosEntidad> { categoriaLubricante, categoriaRepuesto, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(30, Constants.Marcas.Marca.YPF, new List<DatosEntidad> { categoriaLubricante, categoriaFluido, categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(31, Constants.Marcas.Marca.ZF, new List<DatosEntidad> { categoriaLubricante, categoriaRepuesto, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(32, Constants.Marcas.Marca.Accelera, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(33, Constants.Marcas.Marca.Achilles, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(34, Constants.Marcas.Marca.Aeolus, new List<DatosEntidad> { categoriaNeumatico, categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(35, Constants.Marcas.Marca.Alliance, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(36, Constants.Marcas.Marca.Aplus, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(37, Constants.Marcas.Marca.Apollo, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(38, Constants.Marcas.Marca.Aptany, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(39, Constants.Marcas.Marca.Atlas, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(40, Constants.Marcas.Marca.Aurora, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(41, Constants.Marcas.Marca.Avon, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(42, Constants.Marcas.Marca.Backlion, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(43, Constants.Marcas.Marca.Barum, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(44, Constants.Marcas.Marca.BFGoodrich, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(45, Constants.Marcas.Marca.BKT, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(46, Constants.Marcas.Marca.Bridgestone, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(47, Constants.Marcas.Marca.Ceat, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(48, Constants.Marcas.Marca.Continental, new List<DatosEntidad> { categoriaNeumatico, categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(49, Constants.Marcas.Marca.Cooper, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(50, Constants.Marcas.Marca.Davanti, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(51, Constants.Marcas.Marca.Dayton, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(52, Constants.Marcas.Marca.Debica, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(53, Constants.Marcas.Marca.Doublestar, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(54, Constants.Marcas.Marca.Dunlop, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(55, Constants.Marcas.Marca.Duro, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(56, Constants.Marcas.Marca.Event, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(57, Constants.Marcas.Marca.Falken, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(58, Constants.Marcas.Marca.Federal, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(59, Constants.Marcas.Marca.Fedima, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(60, Constants.Marcas.Marca.Firemax, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(61, Constants.Marcas.Marca.Firestone, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(62, Constants.Marcas.Marca.Fortuna, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(63, Constants.Marcas.Marca.Fortune, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(64, Constants.Marcas.Marca.Fulda, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(65, Constants.Marcas.Marca.Fullrun, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(66, Constants.Marcas.Marca.Fullway, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(67, Constants.Marcas.Marca.General, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(68, Constants.Marcas.Marca.Gislaved, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(69, Constants.Marcas.Marca.Goodride, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(70, Constants.Marcas.Marca.Goodyear, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(71, Constants.Marcas.Marca.Gremax, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(72, Constants.Marcas.Marca.GTRadial, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(73, Constants.Marcas.Marca.Haida, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(74, Constants.Marcas.Marca.Hankook, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(75, Constants.Marcas.Marca.Hifly, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(76, Constants.Marcas.Marca.Hilo, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(77, Constants.Marcas.Marca.Infinity, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(78, Constants.Marcas.Marca.InsaTurbo, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(79, Constants.Marcas.Marca.Jinyu, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(80, Constants.Marcas.Marca.Kapsen, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(81, Constants.Marcas.Marca.Kelly, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(82, Constants.Marcas.Marca.Kenda, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(83, Constants.Marcas.Marca.Kingstar, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(84, Constants.Marcas.Marca.Kleber, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(85, Constants.Marcas.Marca.Kormoran, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(86, Constants.Marcas.Marca.Kumho, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(87, Constants.Marcas.Marca.Landsail, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(88, Constants.Marcas.Marca.Lanvigator, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(89, Constants.Marcas.Marca.Lassa, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(90, Constants.Marcas.Marca.Laufenn, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(91, Constants.Marcas.Marca.Linglong, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(92, Constants.Marcas.Marca.Mabor, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(93, Constants.Marcas.Marca.Marshall, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(94, Constants.Marcas.Marca.Matador, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(95, Constants.Marcas.Marca.Maxtrek, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(96, Constants.Marcas.Marca.Maxxis, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(97, Constants.Marcas.Marca.Metzeler, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(98, Constants.Marcas.Marca.Michelin, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(99, Constants.Marcas.Marca.Minerva, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(100, Constants.Marcas.Marca.Nankang, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(101, Constants.Marcas.Marca.Nexen, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(102, Constants.Marcas.Marca.Nokian, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(103, Constants.Marcas.Marca.Norauto, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(104, Constants.Marcas.Marca.Orium, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(105, Constants.Marcas.Marca.Ovation, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(106, Constants.Marcas.Marca.Pace, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(107, Constants.Marcas.Marca.Pirelli, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(108, Constants.Marcas.Marca.Powertrac, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(109, Constants.Marcas.Marca.Primewell, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(110, Constants.Marcas.Marca.Radar, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(111, Constants.Marcas.Marca.Rapid, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(112, Constants.Marcas.Marca.Riken, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(113, Constants.Marcas.Marca.Roadstone, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(114, Constants.Marcas.Marca.Rotalla, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(115, Constants.Marcas.Marca.Sailun, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(116, Constants.Marcas.Marca.Sava, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(117, Constants.Marcas.Marca.Seiberling, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(118, Constants.Marcas.Marca.Semperit, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(119, Constants.Marcas.Marca.Silverstone, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(120, Constants.Marcas.Marca.Sportiva, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(121, Constants.Marcas.Marca.Starfire, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(122, Constants.Marcas.Marca.Starmaxx, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(123, Constants.Marcas.Marca.Sunfull, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(124, Constants.Marcas.Marca.Sunny, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(125, Constants.Marcas.Marca.Taurus, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(126, Constants.Marcas.Marca.Tigar, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(127, Constants.Marcas.Marca.Toledo, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(128, Constants.Marcas.Marca.Torque, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(129, Constants.Marcas.Marca.Toyo, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(130, Constants.Marcas.Marca.Tracmax, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(131, Constants.Marcas.Marca.Triangle, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(132, Constants.Marcas.Marca.UNIROYAL, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(133, Constants.Marcas.Marca.Viking, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(134, Constants.Marcas.Marca.Vredestein, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(135, Constants.Marcas.Marca.Wanli, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(136, Constants.Marcas.Marca.Yokohama, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(137, Constants.Marcas.Marca.Zenises, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(138, Constants.Marcas.Marca.Zeta, new List<DatosEntidad> { categoriaNeumatico }));
            marcas.Add(datosEntidadBuilder.Build(139, Constants.Marcas.Marca.ABAKUS, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(140, Constants.Marcas.Marca.ABE, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(141, Constants.Marcas.Marca.ABS, new List<DatosEntidad> { categoriaRepuesto, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(142, Constants.Marcas.Marca.AcRolcar, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(143, Constants.Marcas.Marca.ACKOJA, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(144, Constants.Marcas.Marca.AE, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(145, Constants.Marcas.Marca.AIRTEX, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(146, Constants.Marcas.Marca.Ajusa, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(147, Constants.Marcas.Marca.ALKONI, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(148, Constants.Marcas.Marca.ALANKO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(149, Constants.Marcas.Marca.Alca, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(150, Constants.Marcas.Marca.ALKAR, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(151, Constants.Marcas.Marca.AMC, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(152, Constants.Marcas.Marca.Arnott, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(153, Constants.Marcas.Marca.ASPL, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(154, Constants.Marcas.Marca.Ashika, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(155, Constants.Marcas.Marca.ASMET, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(156, Constants.Marcas.Marca.Ate, new List<DatosEntidad> { categoriaRepuesto, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(157, Constants.Marcas.Marca.Auger, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(158, Constants.Marcas.Marca.AUTEX, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(159, Constants.Marcas.Marca.AUTLOG, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(160, Constants.Marcas.Marca.Autofren, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(161, Constants.Marcas.Marca.AUTOMEGA, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(162, Constants.Marcas.Marca.BANDO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(163, Constants.Marcas.Marca.BERU, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(164, Constants.Marcas.Marca.BILSTEIN, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(165, Constants.Marcas.Marca.BLAUPUNKT, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(166, Constants.Marcas.Marca.BLIC, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(167, Constants.Marcas.Marca.BLUEPRINT, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(168, Constants.Marcas.Marca.BMCATALYSTS, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(169, Constants.Marcas.Marca.BORGBECK, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(170, Constants.Marcas.Marca.Borsehung, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(171, Constants.Marcas.Marca.Bosal, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(172, Constants.Marcas.Marca.BOSCH, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(173, Constants.Marcas.Marca.BPW, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(174, Constants.Marcas.Marca.Brembo, new List<DatosEntidad> { categoriaRepuesto, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(175, Constants.Marcas.Marca.BREMI, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(176, Constants.Marcas.Marca.BTA, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(177, Constants.Marcas.Marca.BTSTURBO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(178, Constants.Marcas.Marca.BU, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(179, Constants.Marcas.Marca.Budweg, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(180, Constants.Marcas.Marca.BUGIAD, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(181, Constants.Marcas.Marca.Caffaro, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(182, Constants.Marcas.Marca.Calorstat, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(183, Constants.Marcas.Marca.CAR, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(184, Constants.Marcas.Marca.Carcommerce, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(185, Constants.Marcas.Marca.CASCO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(186, Constants.Marcas.Marca.Cifam, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(187, Constants.Marcas.Marca.Cofle, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(188, Constants.Marcas.Marca.CORTECO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(189, Constants.Marcas.Marca.DASIS, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(190, Constants.Marcas.Marca.DAYCO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(191, Constants.Marcas.Marca.DelphiTechnologies, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(192, Constants.Marcas.Marca.DENCKERMANN, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(193, Constants.Marcas.Marca.DENSO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(194, Constants.Marcas.Marca.Dinex, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(195, Constants.Marcas.Marca.DOLZ, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(196, Constants.Marcas.Marca.DRI, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(197, Constants.Marcas.Marca.DRIVE, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(198, Constants.Marcas.Marca.DT, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(199, Constants.Marcas.Marca.Eberspacher, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(200, Constants.Marcas.Marca.Eibach, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(201, Constants.Marcas.Marca.ELECTRICLIFE, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(202, Constants.Marcas.Marca.Elring, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(203, Constants.Marcas.Marca.ELSTOCK, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(204, Constants.Marcas.Marca.ELWIS, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(205, Constants.Marcas.Marca.ENERGY, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(206, Constants.Marcas.Marca.ENGINETEAM, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(207, Constants.Marcas.Marca.EPS, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(208, Constants.Marcas.Marca.ERA, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(209, Constants.Marcas.Marca.ERNST, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(210, Constants.Marcas.Marca.Ert, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(211, Constants.Marcas.Marca.EUROTEC, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(212, Constants.Marcas.Marca.EXEDY, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(213, Constants.Marcas.Marca.FAFischerAutomotive, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(214, Constants.Marcas.Marca.FACET, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(215, Constants.Marcas.Marca.FAE, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(216, Constants.Marcas.Marca.FAG, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(217, Constants.Marcas.Marca.FAI, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(218, Constants.Marcas.Marca.FAST, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(219, Constants.Marcas.Marca.FEBEST, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(220, Constants.Marcas.Marca.FebiBilstein, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(221, Constants.Marcas.Marca.FERODO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(222, Constants.Marcas.Marca.FILTRON, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(223, Constants.Marcas.Marca.FISPA, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(224, Constants.Marcas.Marca.Freccia, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(225, Constants.Marcas.Marca.Frenkit, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(226, Constants.Marcas.Marca.FRIGAIR, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(227, Constants.Marcas.Marca.Gates, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(228, Constants.Marcas.Marca.GENERALRICAMBI, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(229, Constants.Marcas.Marca.GK, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(230, Constants.Marcas.Marca.GLASER, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(231, Constants.Marcas.Marca.GLYCO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(232, Constants.Marcas.Marca.GOETZE, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(233, Constants.Marcas.Marca.GRAF, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(234, Constants.Marcas.Marca.GSP, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(235, Constants.Marcas.Marca.HR, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(236, Constants.Marcas.Marca.HASTINGS, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(237, Constants.Marcas.Marca.HCCARGO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(238, Constants.Marcas.Marca.HD, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(239, Constants.Marcas.Marca.HELLA, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(240, Constants.Marcas.Marca.HEPU, new List<DatosEntidad> { categoriaRepuesto, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(241, Constants.Marcas.Marca.HERTHBUSS, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(242, Constants.Marcas.Marca.HITACHI, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(243, Constants.Marcas.Marca.HJS, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(244, Constants.Marcas.Marca.HUTCHINSON, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(245, Constants.Marcas.Marca.IJSGROUP, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(246, Constants.Marcas.Marca.IMASAF, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(247, Constants.Marcas.Marca.IMPERCOM, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(248, Constants.Marcas.Marca.INA, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(249, Constants.Marcas.Marca.IPSA, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(250, Constants.Marcas.Marca.Jacky, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(251, Constants.Marcas.Marca.JANMOR, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(252, Constants.Marcas.Marca.Japanparts, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(253, Constants.Marcas.Marca.Johns, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(254, Constants.Marcas.Marca.JPGroup, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(255, Constants.Marcas.Marca.KN, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(256, Constants.Marcas.Marca.KAMOKA, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(257, Constants.Marcas.Marca.KANACO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(258, Constants.Marcas.Marca.KILEN, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(259, Constants.Marcas.Marca.KLAXCAR, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(260, Constants.Marcas.Marca.KLOKKERHOLM, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(261, Constants.Marcas.Marca.KNORRBREMSE, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(262, Constants.Marcas.Marca.KONI, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(263, Constants.Marcas.Marca.KSTOOLS, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(264, Constants.Marcas.Marca.KUFIETA, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(265, Constants.Marcas.Marca.KW, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(266, Constants.Marcas.Marca.Lauber, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(267, Constants.Marcas.Marca.LAUBER, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(268, Constants.Marcas.Marca.LEMFORDER, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(269, Constants.Marcas.Marca.LESJOFORS, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(270, Constants.Marcas.Marca.LIFTTEK, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(271, Constants.Marcas.Marca.LOBRO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(272, Constants.Marcas.Marca.Lpr, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(273, Constants.Marcas.Marca.LRT, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(274, Constants.Marcas.Marca.Lucas, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(275, Constants.Marcas.Marca.LUK, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(276, Constants.Marcas.Marca.MAGNETIMARELLICheckstar, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(277, Constants.Marcas.Marca.Magnum, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(278, Constants.Marcas.Marca.MAHLE, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(279, Constants.Marcas.Marca.MALO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(280, Constants.Marcas.Marca.MAMMOOTH, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(281, Constants.Marcas.Marca.MANNFILTER, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(282, Constants.Marcas.Marca.MAPCO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(283, Constants.Marcas.Marca.MAXGEAR, new List<DatosEntidad> { categoriaRepuesto, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(284, Constants.Marcas.Marca.MC, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(285, Constants.Marcas.Marca.MECARM, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(286, Constants.Marcas.Marca.Metelli, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(287, Constants.Marcas.Marca.Metzger, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(288, Constants.Marcas.Marca.MIRAGLIO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(289, Constants.Marcas.Marca.MobilMedic, new List<DatosEntidad> { categoriaRepuesto, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(290, Constants.Marcas.Marca.MOBILETRON, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(291, Constants.Marcas.Marca.MONROE, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(292, Constants.Marcas.Marca.MOOGCOMPLEX, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(293, Constants.Marcas.Marca.Mts, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(294, Constants.Marcas.Marca.NARVA, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(295, Constants.Marcas.Marca.Ne, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(296, Constants.Marcas.Marca.NEOLUX, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(297, Constants.Marcas.Marca.Nexus, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(298, Constants.Marcas.Marca.NGK, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(299, Constants.Marcas.Marca.NIPPARTS, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(300, Constants.Marcas.Marca.Nissens, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(301, Constants.Marcas.Marca.NRF, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(302, Constants.Marcas.Marca.Nural, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(303, Constants.Marcas.Marca.Optibelt, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(304, Constants.Marcas.Marca.OPTIMAL, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(305, Constants.Marcas.Marca.OSRAM, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(306, Constants.Marcas.Marca.Pacol, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(307, Constants.Marcas.Marca.Pascal, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(308, Constants.Marcas.Marca.Payen, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(309, Constants.Marcas.Marca.PetersEnnepetal, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(310, Constants.Marcas.Marca.PHILIPS, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(311, Constants.Marcas.Marca.PIERBURG, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(312, Constants.Marcas.Marca.POLMO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(313, Constants.Marcas.Marca.PRASCO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(314, Constants.Marcas.Marca.Presto, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(315, Constants.Marcas.Marca.PROFIT, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(316, Constants.Marcas.Marca.PSH, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(317, Constants.Marcas.Marca.Purflux, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(318, Constants.Marcas.Marca.RHRoadhouse, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(319, Constants.Marcas.Marca.RIDEX, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(320, Constants.Marcas.Marca.Rotovis, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(321, Constants.Marcas.Marca.RTS, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(322, Constants.Marcas.Marca.RYB, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(323, Constants.Marcas.Marca.RYMEC, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(324, Constants.Marcas.Marca.SACHS, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(325, Constants.Marcas.Marca.SASIC, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(326, Constants.Marcas.Marca.SCHRADER, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(327, Constants.Marcas.Marca.Seim, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(328, Constants.Marcas.Marca.SIDAT, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(329, Constants.Marcas.Marca.SIDEM, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(330, Constants.Marcas.Marca.SIEGEL, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(331, Constants.Marcas.Marca.SKF, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(332, Constants.Marcas.Marca.SKV, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(333, Constants.Marcas.Marca.SNR, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(334, Constants.Marcas.Marca.SPIDAN, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(335, Constants.Marcas.Marca.STABILUS, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(336, Constants.Marcas.Marca.STARK, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(337, Constants.Marcas.Marca.STATIM, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(338, Constants.Marcas.Marca.SUPLEX, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(339, Constants.Marcas.Marca.SWF, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(340, Constants.Marcas.Marca.TEDGUM, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(341, Constants.Marcas.Marca.TESLA, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(342, Constants.Marcas.Marca.TEXTAR, new List<DatosEntidad> { categoriaRepuesto, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(343, Constants.Marcas.Marca.THERMOTEC, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(344, Constants.Marcas.Marca.TOMEX, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(345, Constants.Marcas.Marca.Topran, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(346, Constants.Marcas.Marca.TREUCKLIGHT, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(347, Constants.Marcas.Marca.TRICLO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(348, Constants.Marcas.Marca.TRISCAN, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(349, Constants.Marcas.Marca.TRUCKTEC, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(350, Constants.Marcas.Marca.TRW, new List<DatosEntidad> { categoriaRepuesto, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(351, Constants.Marcas.Marca.Turborail, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(352, Constants.Marcas.Marca.TYC, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(353, Constants.Marcas.Marca.UFI, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(354, Constants.Marcas.Marca.ULO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(355, Constants.Marcas.Marca.UNIPOINT, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(356, Constants.Marcas.Marca.Valeo, new List<DatosEntidad> { categoriaRepuesto, categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(357, Constants.Marcas.Marca.VanWezei, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(358, Constants.Marcas.Marca.VDO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(359, Constants.Marcas.Marca.VEGAZ, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(360, Constants.Marcas.Marca.VEMO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(361, Constants.Marcas.Marca.VICTORREINZ, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(362, Constants.Marcas.Marca.VIGNAL, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(363, Constants.Marcas.Marca.Vika, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(364, Constants.Marcas.Marca.WABCO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(365, Constants.Marcas.Marca.WAHLER, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(366, Constants.Marcas.Marca.WALKER, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(367, Constants.Marcas.Marca.YAMATO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(368, Constants.Marcas.Marca.YATO, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(369, Constants.Marcas.Marca.Zimmermann, new List<DatosEntidad> { categoriaRepuesto }));
            marcas.Add(datosEntidadBuilder.Build(370, Constants.Marcas.Marca.Abarth, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(371, Constants.Marcas.Marca.AC, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(372, Constants.Marcas.Marca.Acura, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(373, Constants.Marcas.Marca.Agrale, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(374, Constants.Marcas.Marca.AlfaRomeo, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(375, Constants.Marcas.Marca.Alpina, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(376, Constants.Marcas.Marca.Alpine, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(377, Constants.Marcas.Marca.Alvis, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(378, Constants.Marcas.Marca.Aro, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(379, Constants.Marcas.Marca.Artega, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(380, Constants.Marcas.Marca.AsiaMotors, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(381, Constants.Marcas.Marca.Askam, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(382, Constants.Marcas.Marca.AstonMartin, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(383, Constants.Marcas.Marca.Audi, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(384, Constants.Marcas.Marca.Austin, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(385, Constants.Marcas.Marca.AustinHealey, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(386, Constants.Marcas.Marca.AutoUnion, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(387, Constants.Marcas.Marca.Autobianchi, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(388, Constants.Marcas.Marca.Auverland, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(389, Constants.Marcas.Marca.Baic, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(390, Constants.Marcas.Marca.Barkas, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(391, Constants.Marcas.Marca.Bedford, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(392, Constants.Marcas.Marca.Bentley, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(393, Constants.Marcas.Marca.Bertone, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(394, Constants.Marcas.Marca.Besturn, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(395, Constants.Marcas.Marca.BMW, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(396, Constants.Marcas.Marca.Borgward, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(397, Constants.Marcas.Marca.Brabus, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(398, Constants.Marcas.Marca.Bugatti, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(399, Constants.Marcas.Marca.Buick, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(400, Constants.Marcas.Marca.BuickSGM, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(401, Constants.Marcas.Marca.Cadillac, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(402, Constants.Marcas.Marca.Carbodies, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(403, Constants.Marcas.Marca.Casalini, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(404, Constants.Marcas.Marca.Caterham, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(405, Constants.Marcas.Marca.Changan, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(406, Constants.Marcas.Marca.Chery, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(407, Constants.Marcas.Marca.Chevrolet, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(408, Constants.Marcas.Marca.Chrysler, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(409, Constants.Marcas.Marca.Citroen, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(410, Constants.Marcas.Marca.Cupra, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(411, Constants.Marcas.Marca.Dacia, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(412, Constants.Marcas.Marca.Daewoo, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(413, Constants.Marcas.Marca.DAF, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(414, Constants.Marcas.Marca.Daihatsu, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(415, Constants.Marcas.Marca.Daimler, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(416, Constants.Marcas.Marca.DFSK, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(417, Constants.Marcas.Marca.Dodge, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(418, Constants.Marcas.Marca.DR, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(419, Constants.Marcas.Marca.DS, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(420, Constants.Marcas.Marca.Ebro, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(421, Constants.Marcas.Marca.Faw, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(422, Constants.Marcas.Marca.Ferrari, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(423, Constants.Marcas.Marca.FIAT, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(424, Constants.Marcas.Marca.Fisker, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(425, Constants.Marcas.Marca.Foton, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(426, Constants.Marcas.Marca.FSO, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(427, Constants.Marcas.Marca.Gaz, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(428, Constants.Marcas.Marca.Geely, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(429, Constants.Marcas.Marca.Genesis, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(430, Constants.Marcas.Marca.GermanECars, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(431, Constants.Marcas.Marca.Glas, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(432, Constants.Marcas.Marca.GMC, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(433, Constants.Marcas.Marca.Goupil, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(434, Constants.Marcas.Marca.GreatWall, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(435, Constants.Marcas.Marca.Haval, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(436, Constants.Marcas.Marca.Holden, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(437, Constants.Marcas.Marca.Honda, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(438, Constants.Marcas.Marca.Hummer, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(439, Constants.Marcas.Marca.Hyundai, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(440, Constants.Marcas.Marca.Indigo, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(441, Constants.Marcas.Marca.Infiniti, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(442, Constants.Marcas.Marca.Innocenti, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(443, Constants.Marcas.Marca.Isuzu, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(444, Constants.Marcas.Marca.Iveco, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(445, Constants.Marcas.Marca.JAC, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(446, Constants.Marcas.Marca.Jaguar, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(447, Constants.Marcas.Marca.Jeep, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(448, Constants.Marcas.Marca.JianglingLandwind, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(449, Constants.Marcas.Marca.Jinbei, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(450, Constants.Marcas.Marca.JMC, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(451, Constants.Marcas.Marca.Kia, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(452, Constants.Marcas.Marca.KTM, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(453, Constants.Marcas.Marca.Lada, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(454, Constants.Marcas.Marca.Lamborghini, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(455, Constants.Marcas.Marca.Lancia, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(456, Constants.Marcas.Marca.LandRover, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(457, Constants.Marcas.Marca.LDV, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(458, Constants.Marcas.Marca.Levc, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(459, Constants.Marcas.Marca.Lexus, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(460, Constants.Marcas.Marca.Lifan, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(461, Constants.Marcas.Marca.Ligier, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(462, Constants.Marcas.Marca.Lincoln, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(463, Constants.Marcas.Marca.Lloyd, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(464, Constants.Marcas.Marca.Lotus, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(465, Constants.Marcas.Marca.LTI, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(466, Constants.Marcas.Marca.Mahindra, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(467, Constants.Marcas.Marca.Man, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(468, Constants.Marcas.Marca.Maruti, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(469, Constants.Marcas.Marca.Maserati, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(470, Constants.Marcas.Marca.Maybach, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(471, Constants.Marcas.Marca.Mazda, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(472, Constants.Marcas.Marca.Mclaren, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(473, Constants.Marcas.Marca.Mega, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(474, Constants.Marcas.Marca.MercedesBenz, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(475, Constants.Marcas.Marca.Mercury, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(476, Constants.Marcas.Marca.MG, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(477, Constants.Marcas.Marca.MiaElectric, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(478, Constants.Marcas.Marca.Microcar, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(479, Constants.Marcas.Marca.Minelli, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(480, Constants.Marcas.Marca.Mini, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(481, Constants.Marcas.Marca.Mitsubishi, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(482, Constants.Marcas.Marca.Morgan, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(483, Constants.Marcas.Marca.Morris, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(484, Constants.Marcas.Marca.Moskvich, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(485, Constants.Marcas.Marca.Nissan, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(486, Constants.Marcas.Marca.NSU, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(487, Constants.Marcas.Marca.Oldsmobile, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(488, Constants.Marcas.Marca.Opel, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(489, Constants.Marcas.Marca.Pagani, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(490, Constants.Marcas.Marca.Panther, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(491, Constants.Marcas.Marca.Peugeot, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(492, Constants.Marcas.Marca.Piaggio, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(493, Constants.Marcas.Marca.Pininfarina, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(494, Constants.Marcas.Marca.Plymouth, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(495, Constants.Marcas.Marca.Pontiac, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(496, Constants.Marcas.Marca.Porsche, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(497, Constants.Marcas.Marca.Proton, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(498, Constants.Marcas.Marca.Puch, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(499, Constants.Marcas.Marca.RAM, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(500, Constants.Marcas.Marca.Renault, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(501, Constants.Marcas.Marca.RollsRoyce, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(502, Constants.Marcas.Marca.Rover, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(503, Constants.Marcas.Marca.Saab, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(504, Constants.Marcas.Marca.Santana, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(505, Constants.Marcas.Marca.Saturn, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(506, Constants.Marcas.Marca.Scion, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(507, Constants.Marcas.Marca.Seat, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(508, Constants.Marcas.Marca.SeroElectric, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(509, Constants.Marcas.Marca.Shelby, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(510, Constants.Marcas.Marca.Shineray, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(511, Constants.Marcas.Marca.ShuanghuanAuto, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(512, Constants.Marcas.Marca.Skoda, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(513, Constants.Marcas.Marca.Smart, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(514, Constants.Marcas.Marca.Ssangyong, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(515, Constants.Marcas.Marca.Steyr, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(516, Constants.Marcas.Marca.Streetscooter, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(517, Constants.Marcas.Marca.Subaru, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(518, Constants.Marcas.Marca.Suzuki, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(519, Constants.Marcas.Marca.SWM, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(520, Constants.Marcas.Marca.Talbot, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(521, Constants.Marcas.Marca.Tata, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(522, Constants.Marcas.Marca.Tesla, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(523, Constants.Marcas.Marca.Think, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(524, Constants.Marcas.Marca.Toyota, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(525, Constants.Marcas.Marca.Trabant, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(526, Constants.Marcas.Marca.Triumph, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(527, Constants.Marcas.Marca.TVR, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(528, Constants.Marcas.Marca.UAZ, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(529, Constants.Marcas.Marca.UMM, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(530, Constants.Marcas.Marca.Vauxhall, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(531, Constants.Marcas.Marca.Victory, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(532, Constants.Marcas.Marca.Volkswagen, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(533, Constants.Marcas.Marca.Volvo, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(534, Constants.Marcas.Marca.Wartburg, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(535, Constants.Marcas.Marca.Westfield, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(536, Constants.Marcas.Marca.Wiesmann, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(537, Constants.Marcas.Marca.Zastava, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(538, Constants.Marcas.Marca.Zuendapp, new List<DatosEntidad> { categoriaAutomovil }));
            marcas.Add(datosEntidadBuilder.Build(539, Constants.Marcas.Marca.Cartechnic, new List<DatosEntidad> { categoriaFluido }));
            marcas.Add(datosEntidadBuilder.Build(540, Constants.Marcas.Marca.Agira, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(541, Constants.Marcas.Marca.APE, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(542, Constants.Marcas.Marca.Aspro, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(543, Constants.Marcas.Marca.Axion, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(544, Constants.Marcas.Marca.CamuzziGasPampeana, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(545, Constants.Marcas.Marca.DAPSA, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(546, Constants.Marcas.Marca.DPEC, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(547, Constants.Marcas.Marca.EDEA, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(548, Constants.Marcas.Marca.EDELAP, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(549, Constants.Marcas.Marca.EDELAR, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(550, Constants.Marcas.Marca.EDEMSA, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(551, Constants.Marcas.Marca.EDENOR, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(552, Constants.Marcas.Marca.EDENOREDES, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(553, Constants.Marcas.Marca.EDERSA, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(554, Constants.Marcas.Marca.EDESA, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(555, Constants.Marcas.Marca.EDESAL, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(556, Constants.Marcas.Marca.EDESE, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(557, Constants.Marcas.Marca.EDESUR, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(558, Constants.Marcas.Marca.EDET, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(559, Constants.Marcas.Marca.EDETE, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(560, Constants.Marcas.Marca.EJE, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(561, Constants.Marcas.Marca.EMSA, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(562, Constants.Marcas.Marca.ENERSA, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(563, Constants.Marcas.Marca.EPEC, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(564, Constants.Marcas.Marca.EPESF, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(565, Constants.Marcas.Marca.ESJ, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(566, Constants.Marcas.Marca.GasNaturalFenosa, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(567, Constants.Marcas.Marca.GNC, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(568, Constants.Marcas.Marca.LitoralGas, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(569, Constants.Marcas.Marca.OilCombustibles, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(570, Constants.Marcas.Marca.Petrobras, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(571, Constants.Marcas.Marca.Refinor, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(572, Constants.Marcas.Marca.REFSA, new List<DatosEntidad> { categoriaFuenteEnergia }));
            marcas.Add(datosEntidadBuilder.Build(573, Constants.Marcas.Marca.SECHEEP, new List<DatosEntidad> { categoriaFuenteEnergia }));
        }
    }
}
